{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Python - Conditional Executions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Frequently the programs needs to follow a certain flow based on the fullfillment of certain condition. \n",
    "If something is true then follow some path otherwise follow another path. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=265x339 at 0xD71BD0>"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from PIL import Image # pip install Pillow  \n",
    "image1=Image.open(\"C:/Users/Admin/Desktop/if.jpg\")\n",
    "image1 "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> Simple Example of guessing a number <b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter an integer\n",
      " 3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your guess is correct!\n"
     ]
    }
   ],
   "source": [
    "import random \n",
    "\n",
    "#generate any random number between 1 to 10\n",
    "number = random.randint(1,10) \n",
    "guess = int(input(\"Enter an integer\\n\"))\n",
    "if guess == number : # condition \n",
    "    print(\"Your guess is correct!\") # conditional block \n",
    "else:\n",
    "    print(\"Sorry, you failed to guess it!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The syntax of if statement generally has the following form : <br>\n",
    "\n",
    "    if <condition> : \n",
    "        statements_to_be_executed_when_condition_is_true\n",
    "    else:    \n",
    "        statements_to_be_executed_when_condition_is_false"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Carefully look at the colons (:) placed after if and else statements. They are compulsary. Also look at the indentation applied at the if block statements and else block statements. The statements having same indendation will be considered as the part of same block. No curly braces or other symbols are used for the determination of the if and else blocks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The simple if statement can have only if block in it. That means , only if the condition is satisfied , then execute the statements in the if block otherwise ignore those statements."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the number\n",
      " 3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3  is odd number\n",
      "This is will get displayed regardless\n"
     ]
    }
   ],
   "source": [
    "number = int(input(\"Enter the number\\n\"))\n",
    "\n",
    "if number % 2 == 0 :   # if entered number is even then only message is shown to the user\n",
    "    print(number ,\" is even number\")\n",
    "else:\n",
    "    print(number,\" is odd number\") # else keyword wil capture anything that the above id conditions are failying to be satisfies/evaluated \n",
    "\n",
    "print('This is will get displayed regardless') # python compiler follows a sequential ordering of instructions execution "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If block can consists of more than one statemenets. If the condition is satisfied all the statements in that block are executed. The statements having same indentaion constitues the block."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Conditional execution statements gives ability to change the flow of the program based on the conditions specified in the statements. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the number\n",
      " 2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You have entered  2\n",
      "2  is even number\n"
     ]
    }
   ],
   "source": [
    "number = int(input(\"Enter the number\\n\"))\n",
    "\n",
    "if number % 2 == 0 :   # if block can consists of more than one statements, here two print statements are printed if condition is true\n",
    "    print(\"You have entered \", number)\n",
    "    print(number ,\" is even number\")   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the number\n",
      " 3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I am always printed!\n"
     ]
    }
   ],
   "source": [
    "number = int(input(\"Enter the number\\n\"))\n",
    "\n",
    "if number % 2 == 0 :   # if block can consists of more than one statements, here two print statements are printed if condiotn is true\n",
    "    print(\"You have entered \", number)\n",
    "    print(number ,\" is even number\")\n",
    "    \n",
    "print(\"I am always printed!\")    # this statement is always printed as its not part of if block, check the indentation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Alternative Execution"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "But there will be situations where we have more than one branches of code that needs to be taken up based on the evaluation of the conditon. In that case, else statement and corresponding else block statements can be added. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the number\n",
      " 5\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5  is odd number\n"
     ]
    }
   ],
   "source": [
    "number = int(input(\"Enter the number\\n\"))\n",
    "\n",
    "if number % 2 == 0 :   # if entered number is even then only message is shown to the user\n",
    "    print(number ,\" is even number\") \n",
    "else : \n",
    "    print(number ,\" is odd number\") "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The else keyword catches anything which isn't caught by the preceding conditions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the mark\n",
      " 0\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sorry you failed!\n"
     ]
    }
   ],
   "source": [
    "mark = int(input(\"Enter the mark\\n\"))\n",
    "\n",
    "if mark < 0 or mark > 100: # or will execute the block if either LHS or RHS evaluate to be TRUE \n",
    "    print(\"Invalid marks are entered!\")\n",
    "elif mark >= 0 and mark < 35 : # and will execute the block where the LHS and RHS needs to be evaluated to be TRUE \n",
    "    print(\"Sorry you failed!\")\n",
    "elif mark >= 35 and mark < 80 :\n",
    "    print(\"You passed in first class\")\n",
    "else :\n",
    "    print(\"You got distinction!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a number  10\n",
      "Enter another number  20\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20 is greater than 10\n"
     ]
    }
   ],
   "source": [
    "#WAP to find the greatest between 2 numbers\n",
    "\n",
    "a = int(input(\"Enter a number \")) \n",
    "b = int(input(\"Enter another number \")) \n",
    "if(b > a): #after every if condition we must end it with a colon \n",
    "    print(f\"{b} is greater than {a}\")\n",
    "elif(a>b):\n",
    "    print(f\"{a} is greater than {b}\")\n",
    "else:\n",
    "    print(f\"{a} and {b} are equal \\n please do not enter same values\") "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Nested Conditionals"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One conditional can be nested within another conditional. For example :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter first number \n",
      " 1\n",
      "Enter second number \n",
      " 2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "First number is smaller than second\n"
     ]
    }
   ],
   "source": [
    "number1 = int(input(\"Enter first number \\n\"))\n",
    "number2 = int(input(\"Enter second number \\n\"))\n",
    "\n",
    "if number1 == number2:\n",
    "    print(\"Both numbers are same\")\n",
    "else:\n",
    "    if number1 > number2:\n",
    "        print(\"First number is bigger than second\")\n",
    "    else:\n",
    "        print(\"First number is smaller than second\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a valid score: 67\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "D grade\n"
     ]
    }
   ],
   "source": [
    "# another example\n",
    "score = int(input(\"Enter a valid score:\")) \n",
    "if score >= 90:\n",
    "    print('A grade')\n",
    "else:\n",
    "    if score >=80:\n",
    "        print('B grade')\n",
    "    else:\n",
    "        if score >= 70:\n",
    "            print('C grade')\n",
    "        else:\n",
    "            if score >= 60:\n",
    "                print('D grade')\n",
    "            else:\n",
    "                if score>=45:\n",
    "                    print('E grade')\n",
    "                else:\n",
    "                    print(\"FAIL\") # can so be replicated using the elif statements , give it a try! \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the marks to print Grade:  67\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "D grade\n"
     ]
    }
   ],
   "source": [
    "# using elif \n",
    "\n",
    "marks=eval(input(\"Enter the marks to print Grade: \"))\n",
    "if marks<0 or marks>100:\n",
    "    print('Invalid entry')\n",
    "elif marks>=89 and marks<=100:\n",
    "    print('A grade')\n",
    "elif marks>=79 and marks<89:\n",
    "    print('B grade')\n",
    "elif marks>=69 and marks<79:\n",
    "    print('C grade')\n",
    "elif marks>=59 and marks<69:\n",
    "    print('D grade')\n",
    "elif marks>=35 and marks<59:\n",
    "    print('E grade')\n",
    "else:\n",
    "    print('Fail')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 'and' logical operator "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The and keyword is a logical operator, and is used to combine conditional statements:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This program will return you the color wrt wavelength \n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a wavelength number ranging from 380-750 : 10000\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter valid number\n"
     ]
    }
   ],
   "source": [
    "#Color Wavelength (nm)\n",
    "#Violet 380 to less than 450\n",
    "#Blue 450 to less than 495\n",
    "#Green 495 to less than 570\n",
    "#Yellow 570 to less than 590\n",
    "#Orange 590 to less than 620\n",
    "#Red 620 to 750\n",
    "\n",
    "#Write a program that reads a wavelength from the user and reports its color. Display\n",
    "#an appropriate error message if the wavelength entered by the user is outside of the\n",
    "#visible spectrum.\n",
    "\n",
    "\n",
    "\n",
    "print(\"This program will return you the color wrt wavelength \")\n",
    "\n",
    "s=int(input(\"Enter a wavelength number ranging from 380-750 :\"))\n",
    "\n",
    "if s>=380 and s<450: # and operator checks if both the expressions are true only then the condition is satisfied and moves into the block\n",
    "    print(\"Violet color\") \n",
    "elif s>=450 and s<495:\n",
    "    print(\"Blue color\")\n",
    "elif s>=495 and s<570:\n",
    "    print(\"Green color\")\n",
    "elif s>=570 and s<590:\n",
    "    print(\"Yellow color\")\n",
    "elif s>=590 and s<620:\n",
    "    print(\"Orange color\")\n",
    "elif s>=620 and s<=750:\n",
    "    print(\"Red color\") \n",
    "else:\n",
    "    print(\"Enter valid number\") \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter first number 10\n",
      "Enter second number 20\n",
      "Enter third number 30\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The greatest value is 30\n"
     ]
    }
   ],
   "source": [
    "#WAP to display the greatest  among 3 numbers\n",
    "\n",
    "a=int(input(\"Enter first number\"))\n",
    "b=int(input(\"Enter second number\")) \n",
    "c=int(input(\"Enter third number\"))\n",
    "if a>b and a>c:\n",
    "    print(\"The greatest value is \" + str(a)) # this does not affect the original data type in the allocated memory \n",
    "elif b>a and b>c:\n",
    "    print(\"The greatest value is \" + str(b))\n",
    "elif c>a and c>b:\n",
    "    print(\"The greatest value is \" + str(c))\n",
    "else:\n",
    "    print(\"Enter different values\")\n",
    "\n",
    "# print(type(a)) # this will remain as int type "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "QUICK QUIZ\n",
    "\n",
    "Q1. Write a program that asks user to enter a length in centimeters. If negative value is entered, the program should tell the user that the entry is invalid. Otherwise the program should convert the length to inches and print out the result. There are 2.54 centimeters in inches.\n",
    "\n",
    "Q2. Write a program that accepts sentence from the user as input and then print the unique words present in that sentense along with the number of times they appeared in the sentence. Don't use any of the built in fuction or other data structure.\n",
    "\n",
    "Q3.Write a program that accepts sentence from the user as input and then print the location of each vowel in the sentence.\n",
    "\n",
    "Q4. Write a program that asks user to enter a word and determines whether the word is palindrome or not. A palindrome is a word \n",
    "that read the same backwards as forwards."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Python - Iterative  Executions\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Sometimes its required to execute the same code block multiple times. For example, if list of students marks is given and we need to compute the total or average marks of that class. We need to iterate over all students marks one by one and need to use each of them for the operation to be performed i.e. summation or averaging. In in each iteration, the opeartion is same but the data is changing. In such situations, loop statements helps us to execute same line of code multiple times in order to perform the same opeartion again and again. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=304x348 at 0xE8EE50>"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# from PIL import Image\n",
    "# image1=Image.open(\"C:/Users/Admin/Desktop/loop.jpg\")\n",
    "# image1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### While Statement"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "While statement helps to execute the code multiple times based on certain logical condition. Until the condition evaluates to true, the statements within the while block are executed. Once the condition evaluates to false, then control does not enter into the while block statements and continues the execution of the code that follows after the while block."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(i)    0     (number)    0\n",
      "(i)    1     (number)    1\n",
      "(i)    2     (number)    2\n",
      "(i)    3     (number)    3\n",
      "(i)    4     (number)    4\n",
      "Length of list  5\n"
     ]
    }
   ],
   "source": [
    "#iterate over the first five numbers \n",
    "\n",
    "my_number_list = range(5)  #generate first five integers starting from zero\n",
    "\n",
    "# print(my_number_list)\n",
    "i = 0   # initialize the iteration variable \n",
    "while i < len(my_number_list):   #evaluate condition \n",
    "    print('(i)   ', i, \"    (number)   \", my_number_list[i])   # while block stmt 1\n",
    "    i = i + 1                                                  # while block stmt 2\n",
    "    \n",
    "print(\"Length of list \", len(my_number_list))    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In above code block, the code flows like - <br>\n",
    "(1) first list of five integers is generated. <br>\n",
    "(2) iteration variable (whose value needs to be changed in every iteration, otherwise loop will never terminate) is initialized, i.e. i = 0<br>\n",
    "(3) While loop condition is evaluated to true or false. <br>\n",
    "(4) If the condition evaluated to true then statement within while loop are executed. One of the statement increments iteration variable value.<br>\n",
    "(5) Step 3 and 4 are executed until the condition evaluates to true.<br>\n",
    "(6) Once the condition evaluates to false, the next statement is executed, i.e. print statement<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Earlier we have written the programs where we explicitly asked user to enter the number of times the loop needs to be executed. It restricts the user. In order to avoid that situation, we can ask user to enter a specific number to state us that he is done with the entering the input and now processing can happen."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the name (use 'Quit' to stop : ashwin\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You entered  ashwin\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the name (use 'Quit' to stop : vivek\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You entered  vivek\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the name (use 'Quit' to stop : Quit \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You entered  Quit \n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the name (use 'Quit' to stop : Quit\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Out of the while loop\n"
     ]
    }
   ],
   "source": [
    "#Example while loop without any restrictions on number of inputs\n",
    "name = \"\" \n",
    "while name != \"Quit\": # \"\" != Quit -> True \n",
    "    name = input(\"Enter the name (use 'Quit' to stop :\")\n",
    "    if name != \"Quit\":\n",
    "        print('You entered ', name)\n",
    "print('Out of the while loop')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Infinite Loops"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i  0\n",
      "i  1\n",
      "i  2\n",
      "i  3\n",
      "i  4\n",
      "Out of while loop\n"
     ]
    }
   ],
   "source": [
    "# Example of infinite loop\n",
    "# i = 0 \n",
    "# while i < 5 :\n",
    "#     print(\"i \", i ) # always have a limit to your loop \n",
    "         \n",
    "# print(\"Out of while loop\")    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What is wrong with above code snippet. It will never terminate because value of iteration variable i.e. i is never changing. It will be always zero and hence the while loop condition will be always true and loop will be executed infinitely. Hence, while using loops one needs to keep in mind that iteration variable has to be changed. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Break Statement"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The break statement is use to break out of a loop before the loop is finished. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "break triggered\n"
     ]
    }
   ],
   "source": [
    "# Example\n",
    "i = 0           #iteration variable initialized\n",
    "while i < 5:    # condition is evaluated \n",
    "    if i > 3 :   \n",
    "        break   # no more further execution of the loop, once i is greater than 3\n",
    "    print(i)    # block statements are executed until the condition is true and iteration variable is less that 3\n",
    "    i = i + 1\n",
    "print('break triggered')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Continue Statement "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Sometimes we want to finish the execution of the current iteration and jump to the next iteration without executing the further statements in the code block, then continue statement can be used. It helps to start a new iteration. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the stmt (Use 'Quit' to stop ) #ash\n",
      "Enter the stmt (Use 'Quit' to stop ) hello\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hello\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the stmt (Use 'Quit' to stop ) Quit\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Quit\n"
     ]
    }
   ],
   "source": [
    "stmt = \"\" # empty string \n",
    "\n",
    "while stmt != 'Quit':\n",
    "    stmt = input(\"Enter the stmt (Use 'Quit' to stop )\")\n",
    "    if stmt.startswith(\"#\") :\n",
    "        continue \n",
    "    if len(stmt) > 0 :\n",
    "        print(stmt)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In above code snippet, user enters the input statement. She can use \"Quit\" word to terminate the execution of code. \n",
    "Once the statement is received, the code checks whether it starts with '#'. If yes, no further statements in the block are executed. It directly jumps to the next iteration. If the statement does not start with '#' then further it checks if the statement has some characters in it or not. If yes, the statement is printed back again. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "4\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n"
     ]
    }
   ],
   "source": [
    "# another example \n",
    "i = 0\n",
    "while i < 9: # i=0, i=1 , i=2\n",
    "    i += 1 # i=1, i=2, i=3\n",
    "    if i == 3 or i==5:\n",
    "        continue # goes back to the while loop \n",
    "    else:\n",
    "        print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n"
     ]
    }
   ],
   "source": [
    "count=0 # while loop example with pass keyword\n",
    "while(count<=5):\n",
    "    pass # passes the compiler to the next line of command \n",
    "    count=count+1\n",
    "print(count)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### For Statement "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### A for loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).\n",
    "#### With the for loop we can execute a set of statements, once for each item in a list, tuple, set etc."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Computers are experts at doing things in repeated manner, especially without any errors. Python for loops in one of the ways by\n",
    "which the code blocks can be executed in the repetative manners, same as while loops. With for loops, in advance you how many times the code execution will be repeated which is not the case with while loops. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the name : ashwin\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You entered  ashwin\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the name : vivek\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You entered  vivek\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the name : aditya\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You entered  aditya\n"
     ]
    }
   ],
   "source": [
    "#Example for loop with fixed number of inputs\n",
    "\n",
    "count = 3\n",
    "for i in range(count):\n",
    "    name = input(\"Enter the name :\")\n",
    "    print('You entered ', name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 ==>  Hello\n",
      "1 ==>  Hello\n",
      "2 ==>  Hello\n",
      "3 ==>  Hello\n",
      "4 ==>  Hello\n"
     ]
    }
   ],
   "source": [
    "#Example : print Hello five times\n",
    "for i in range(5):\n",
    "    print(i,'==>',\" Hello\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the for statement, word 'for' is in lower case followed by loop variable ending with colon. The for loop statements needs to be indendated at same level. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the number 2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the cube is  8\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the number 3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the cube is  27\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the number 4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the cube is  64\n"
     ]
    }
   ],
   "source": [
    "#Example : Compute cube of a number three times (take three inputs)\n",
    "for i in range(3): # be default , i will get incremented which is not the case in the while loop ( where you need to explicitly specify)\n",
    "    number = int(input(\"Enter the number\"))\n",
    "    print(\"the cube is \" , number*number*number )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n"
     ]
    }
   ],
   "source": [
    "#Example : print first five integers\n",
    "b=range(5)\n",
    "\n",
    "for i in b:\n",
    "    print(i) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we expected that the program should print numbers 1 to 5 but actually it printed 0 to 4. This is because the loop variable i.e. i is always initialized to zero and then incremented by one after each iteration. The program loops 5 times, each time increasing the value of i by 1 , until we have looped five times. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(i)   0 (number)  1\n",
      "(i)   1 (number)  2\n",
      "(i)   2 (number)  3\n",
      "(i)   3 (number)  4\n",
      "(i)   4 (number)  5\n"
     ]
    }
   ],
   "source": [
    "#Example : print first five integers along with value of i\n",
    "for i in range(5):\n",
    "    print(\"(i)  \", i, \"(number) \" , i+1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Range function"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The range function helps to generate the range of numbers based on given inputs to it. The value we put in range function determines how many times the loop should be executed. range function produces a list of numbers from zero to the value minus one. For example, range(3) generates 3 values : 0, 1 and 2."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Syntax - range(start_value, end_value, step) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "range(9, 2, -1)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# #Examples\n",
    "\n",
    "# range(5)                  # produces  five values 0, 1, 2, 3, 4\n",
    "# range(1, 5)               # produces  four values 1, 2, 3, 4\n",
    "# range(2, 4)               # produces  two values 2, 3\n",
    "# range(1, 10, 2)           # produces values starting from zero to nine , at step of 2 i.e. 1, 3, 5, 7, 9\n",
    "# range(9, 2, -1)           # produces values starting from nine to three , at step of -1 i.e. 9, 8, 7, 6, 5, 4, 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "3\n",
      "4\n"
     ]
    }
   ],
   "source": [
    "for i in range(2,5):\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "3\n",
      "5\n",
      "7\n",
      "9\n"
     ]
    }
   ],
   "source": [
    "for i in range(1,10,2):\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "9\n",
      "8\n",
      "7\n",
      "6\n",
      "5\n",
      "4\n"
     ]
    }
   ],
   "source": [
    "for i in range(10,3,-1):\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  For loop Variations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11\n",
      "31\n",
      "51\n",
      "67\n"
     ]
    }
   ],
   "source": [
    "# iterate over values directly- use tuple to achieve \n",
    "for i in (11,31,51,67): \n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n"
     ]
    }
   ],
   "source": [
    "# iterate fixed number of times\n",
    "for i in range(3):\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n"
     ]
    }
   ],
   "source": [
    "# iterate fixed number of times with start and end value\n",
    "for i in range(1, 5):\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "3\n"
     ]
    }
   ],
   "source": [
    "# iterate fixed number of times with start and end value with gaps in between\n",
    "for i in range(1, 5, 2):\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23\n",
      "34\n",
      "12\n",
      "34\n",
      "45\n"
     ]
    }
   ],
   "source": [
    "#iterate over list of values \n",
    "\n",
    "scores = [23, 34, 12, 34, 45]\n",
    "# length = len(scores)\n",
    "\n",
    "# for score in scores: # you can use this technique to iterate over a sequence of data list containing elements\n",
    "#     print(score)\n",
    "    \n",
    "# for i in range(len(scores)): # 0->5  i.e 0,1,2,3,4 # technique number 2 \n",
    "#     print(scores[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "index :  0    value :  1\n",
      "index :  1    value :  2\n",
      "index :  2    value :  3\n",
      "index :  3    value :  4\n",
      "index :  4    value :  5\n"
     ]
    }
   ],
   "source": [
    "#iterate over list of values directly along with index\n",
    "squares = [1,2,3,4,5]\n",
    "value=enumerate(squares) # Unpack the data structure w.r.t to their indexing positions \n",
    "# print(value)\n",
    "# print(list(value))\n",
    "\n",
    "for i, square in value: # technique number 3 using enumerate method \n",
    "    print(\"index : \", i, \"  \", \"value : \" , square)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "((0, 1), (1, 2), (2, 3), (3, 4))\n"
     ]
    }
   ],
   "source": [
    "tuples={1:'ashwin',2:'vivek',3:'aditya',4:'vidhya'} # yes, enumerate works well for all collective data types \n",
    "value=enumerate(tuples)\n",
    "print(tuple(value))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "T\n",
      "H\n",
      "I\n",
      "S\n",
      " \n",
      "I\n",
      "S\n",
      " \n",
      "A\n",
      " \n",
      "D\n",
      "E\n",
      "M\n",
      "O\n"
     ]
    }
   ],
   "source": [
    "#iterate over strings directly\n",
    "\n",
    "my_string = \"this is a demo\"\n",
    "\n",
    "for letter in my_string:\n",
    "    print(letter.upper())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "two\n",
      "3.4\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "#iterate over tuple elements directly\n",
    "\n",
    "my_tuple = (1, 'two', 3.4, True)\n",
    "\n",
    "for element in my_tuple:\n",
    "    print(element)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.4\n",
      "1\n",
      "two\n"
     ]
    }
   ],
   "source": [
    "#iterate over set elements directly\n",
    "\n",
    "my_set = {1, 'two', 3.4, True}\n",
    "\n",
    "for element in my_set:\n",
    "    print(element)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "key1 --> value1\n",
      "key2 --> value2\n"
     ]
    }
   ],
   "source": [
    "#iterate over dictionary elements directly\n",
    "\n",
    "my_dict = {\"key1\": \"value1\", \"key2\":\"value2\"}\n",
    "\n",
    "for item in my_dict.items():\n",
    "    print(item[0],'-->',item[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "key1\n",
      "key2\n"
     ]
    }
   ],
   "source": [
    "#iterate over dictionary keys directly\n",
    "\n",
    "my_dict = {\"key1\": \"value1\", \"key2\":\"value2\"}\n",
    "\n",
    "for key in my_dict.keys():\n",
    "    print(key)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "key1 --> value1\n",
      "key2 --> value2\n"
     ]
    }
   ],
   "source": [
    "for key,value in my_dict.items():\n",
    "    print(key,'-->',value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "value1\n",
      "value2\n"
     ]
    }
   ],
   "source": [
    "#iterate over dictionary values directly\n",
    "\n",
    "my_dict = {\"key1\": \"value1\", \"key2\":\"value2\"}\n",
    "\n",
    "for value in my_dict.values():\n",
    "    print(value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['c', 'a', 't', 'd', 'o', 'g', 'r', 'a', 'b', 'b', 'i', 't']\n"
     ]
    }
   ],
   "source": [
    "# NESTED LOOPS example\n",
    "\n",
    "wordlist = ['cat','dog','rabbit']\n",
    "letterlist = []\n",
    "for x in wordlist: # x is 0 , 0=cat ; x is 1 , 1=dog\n",
    "    for y in x: # y is 0 , 0 in cat-> 'c', y is 1 , 1 in cat-> 'a', 2 in cat -> 't' ; y is 0 , 0 in dog-> 'd'\n",
    "        letterlist.append(y)\n",
    "print(letterlist)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 * 1 = 1\n",
      "1 * 2 = 2\n",
      "1 * 3 = 3\n",
      "1 * 4 = 4\n",
      "1 * 5 = 5\n",
      "2 * 1 = 2\n",
      "2 * 2 = 4\n",
      "2 * 3 = 6\n",
      "2 * 4 = 8\n",
      "2 * 5 = 10\n",
      "3 * 1 = 3\n",
      "3 * 2 = 6\n",
      "3 * 3 = 9\n",
      "3 * 4 = 12\n",
      "3 * 5 = 15\n",
      "4 * 1 = 4\n",
      "4 * 2 = 8\n",
      "4 * 3 = 12\n",
      "4 * 4 = 16\n",
      "4 * 5 = 20\n",
      "5 * 1 = 5\n",
      "5 * 2 = 10\n",
      "5 * 3 = 15\n",
      "5 * 4 = 20\n",
      "5 * 5 = 25\n"
     ]
    }
   ],
   "source": [
    "# another example\n",
    "for x in range(1, 6):\n",
    "    for y in range(1, 6):\n",
    "        print('%i * %d = %d' % (x, y, x*y)) # place holder technique \n",
    "# In CS ,%i represents integer value , %d also rep integer value, %f rep float value, %s rep string value "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(60, 19), (70, 20), (75, 19.5), (65, 18.5), (53, 20)]\n"
     ]
    }
   ],
   "source": [
    "'''Ever wondered what the zip keyword does? Look at the below example'''\n",
    "\n",
    "marks=[60, 70, 75, 65, 53]\n",
    "internals=[19, 20, 19.5, 18.5, 20]\n",
    "zipper=zip(marks,internals) # zip keyword is used to zip/map elements/items from two different data structures of same/different type\n",
    "print(list(zipper))\n",
    "# print(type(zipper)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final score - [79, 90, 94.5, 83.5, 73]\n"
     ]
    }
   ],
   "source": [
    "result= [(x + y) for (x, y) in zipper] # list comprehension \n",
    "print(f\"Final score - {result}\")\n",
    "# print(f\"Final average percentage {(sum(result)/50)*100}%\")   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
     ]
    }
   ],
   "source": [
    "x=(i for i in range(1,10)) # list comprehension \n",
    "print(list(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random  # guessing number game \n",
    "\n",
    "#generate any random number between 1 to 10\n",
    "number = random.randint(1,10) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter an integer\n",
      " 7\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your guess is correct!\n",
      "Wow you guessed it\n"
     ]
    }
   ],
   "source": [
    "while True:\n",
    "    guess = int(input(\"Enter an integer\\n\"))\n",
    "    if guess == number :\n",
    "        print(\"Your guess is correct!\")\n",
    "        break\n",
    "    else:\n",
    "        continue\n",
    "#         print(\"Sorry, you failed to guess it!\")\n",
    "print('Wow you guessed it')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "i is no more less than 6\n"
     ]
    }
   ],
   "source": [
    "i=1 # yes you can have the else part of your while loop \n",
    "while i<5:\n",
    "    print(i)\n",
    "    i+=1\n",
    "else:\n",
    "    print('i is no more less than 6')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### QUICK QUIZ"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Q5. Write a program using while loop that prints square and cube of numbers between 1 to 10."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Q6. Use a for loop to print a triangle like the one below. Allow the user to specify how high the triangle should be. <br>\n",
    "@<br>\n",
    "@@<br>\n",
    "@@@<br>\n",
    "@@@@<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Q7. Write a program that asks the user to enter the password. If the user enters the right password, the program should tell them they are logged in to the system. Otherwise, the program should ask them to reenter the password. The user should get only five tries to enter the password, after which point the program should tell them that they are kicked off of the system."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### HW"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1) Write a Python program to find those numbers which are divisible by 7 and multiple of 5,\n",
    " between 1500 and 2700 (both included).\n",
    "\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " 2) Write a Python program which iterates the integers from 1 to 50. \n",
    " \n",
    " For multiples of three print \"Fizz\" instead of the number and for the multiples of five print \"Buzz\". \n",
    " \n",
    " For numbers which are multiples of both three and five print \"FizzBuzz\".\n",
    "\n",
    " Sample Output : \n",
    " \n",
    " fizzbuzz\n",
    " \n",
    " 1\n",
    " \n",
    " 2\n",
    " \n",
    " fizz\n",
    " \n",
    " 4 \n",
    " \n",
    " buzz\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Q1. Write a program that asks user to enter a length in centimeters. If negative value is entered, the program should tell the user that the entry is invalid. Otherwise the program should convert the length to inches and print out the result. There are 2.54 centimeters in inches."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the lenght in centimeter\n",
      " 10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.0  cm =  3.937007874015748  inches\n"
     ]
    }
   ],
   "source": [
    "# #Q1 Solution\n",
    "\n",
    "# length_in_cm = input(\"Enter the lenght in centimeter\\n\")\n",
    "\n",
    "# try:\n",
    "#     length_in_cm = float(length_in_cm) # type error if value entered is a character\n",
    "    \n",
    "#     if length_in_cm < 0 :\n",
    "#         print(\"You have entered negative value. \")\n",
    "#     else:\n",
    "#         length_in_inches = length_in_cm / 2.54\n",
    "#         print(length_in_cm, \" cm = \", length_in_inches, \" inches\")\n",
    "# except:\n",
    "#     print(\"Seems you have not entered a number. \")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Q2. Write a program that accepts sentence from the user as input and then print the unique words present in that sentense along with the number of times they appeared in the sentence. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the sentence\n",
      " python is awesome python is interesting \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['python', 'is', 'awesome', 'python', 'is', 'interesting']\n",
      "python      2\n",
      "is      2\n",
      "awesome      1\n",
      "interesting      1\n"
     ]
    }
   ],
   "source": [
    "# # Q2 Solution\n",
    "\n",
    "# sentence = input('Enter the sentence\\n')\n",
    "\n",
    "# list_of_words = sentence.split() # split() returns a list data type \n",
    "# print(list_of_words)\n",
    "# list_of_unique_words = []\n",
    "# list_of_count_of_unique_words = []\n",
    "\n",
    "# for word in list_of_words:\n",
    "#     if word not in list_of_unique_words: # python , is , interesting , ','\n",
    "#         list_of_unique_words.append(word) # ['python','is','interesting',',']\n",
    "#         list_of_count_of_unique_words.append(1) # [2,2,1,1]\n",
    "#     else:\n",
    "#         index = list_of_unique_words.index(word) # index=0 , index=1 \n",
    "#         count = int(list_of_count_of_unique_words[index])  # 1 , 1\n",
    "#         count = count + 1 # 2 , 2 \n",
    "#         list_of_count_of_unique_words[index] = count # 2 \n",
    "        \n",
    "# # print(\"\\n Word     Count\")        \n",
    "# for i in range(len(list_of_unique_words)):\n",
    "#     print(list_of_unique_words[i], \"    \", list_of_count_of_unique_words[i])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Q3.Write a program that accepts sentence from the user as input and then print the location of each vowel in the sentence."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the sentence\n",
      " python is awesome \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "o present at location  4\n",
      "i present at location  7\n",
      "a present at location  10\n",
      "e present at location  12\n",
      "o present at location  14\n",
      "e present at location  16\n"
     ]
    }
   ],
   "source": [
    "# #Q3 Solution\n",
    "# sentence = input('Enter the sentence\\n')\n",
    "\n",
    "# vowel_list = ['a', 'e', 'i', 'o', 'u']\n",
    "\n",
    "# index = 0\n",
    "# for letter in sentence: # python is awesome, letter=0,p ; letter=1,y; letter=2,t;leter=3,h;letter=4,o\n",
    "#     if letter in vowel_list:\n",
    "#         print(letter, \"present at location \", index)\n",
    "#     index = index + 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Q4. Write a program that asks user to enter a word and determines whether the word is palindrome or not. A palindrome is a word \n",
    "that read the same backwards as forwards."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter the word\n",
      " malayalam\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The string is palindrome\n"
     ]
    }
   ],
   "source": [
    "# #Q4 Solution\n",
    "\n",
    "# string = input(\"enter the word\\n\")\n",
    "\n",
    "# orig_string = list(string)\n",
    "# # print(orig_string)\n",
    "# reversed_string = list(reversed(string))\n",
    "# # print(reversed_string)\n",
    "\n",
    "# is_palindrome = True\n",
    "# for i in range(len(orig_string)):\n",
    "#     if orig_string[i] != reversed_string[i]:\n",
    "#         is_palindrome = False\n",
    "        \n",
    "# if is_palindrome:\n",
    "#     print('The string is palindrome')\n",
    "# else:\n",
    "#     print('The string is not palindrome')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number  1    square    1    cube    1\n",
      "number  2    square    4    cube    8\n",
      "number  3    square    9    cube    27\n",
      "number  4    square    16    cube    64\n",
      "number  5    square    25    cube    125\n",
      "number  6    square    36    cube    216\n",
      "number  7    square    49    cube    343\n",
      "number  8    square    64    cube    512\n",
      "number  9    square    81    cube    729\n",
      "number  10    square    100    cube    1000\n"
     ]
    }
   ],
   "source": [
    "# # #Solution 5\n",
    "# number = 1\n",
    "# while number <=10 : \n",
    "#     print(\"number \", number, \"   square   \", number * number, \"   cube   \", number * number*number)\n",
    "#     number = number + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the height of triangle\n",
      " 5\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "@\n",
      "@@\n",
      "@@@\n",
      "@@@@\n",
      "@@@@@\n"
     ]
    }
   ],
   "source": [
    "# #Solution 6\n",
    "\n",
    "# times = int(input(\"Enter the height of triangle\\n\"))\n",
    "# print()\n",
    "\n",
    "# items = []\n",
    "# for i in range(times):\n",
    "#     items.append(i+1)\n",
    "\n",
    "# for x in items: # [1,2,3,4,5]\n",
    "#     print(x * \"@\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Please enter the password \n",
      " password\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You are logged in!\n"
     ]
    }
   ],
   "source": [
    "# #Solution 7\n",
    "\n",
    "# password = \"password\"\n",
    "# times = 5 \n",
    "# match_found = False\n",
    "\n",
    "# for i in range(times):\n",
    "#     user_password = input(\"Please enter the password \\n\")\n",
    "#     if user_password == password:\n",
    "#         match_found = True\n",
    "#         print(\"You are logged in!\")\n",
    "#         break\n",
    "        \n",
    "# if not(match_found) :\n",
    "#     print(\"You have used all the attempts for login\")\n",
    "\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Refer to - https://docs.python.org/3/tutorial/controlflow.html"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
